[core]
	excludesfile = ~/.gitignore_global
	autoCRLF = false
	quotepath = false
[user]
	name = ymgn
	email = gonyamagon@gmail.com
[alias]
	plog = log --pretty='format:%C(yellow)%h %C(green)%cd %C(reset)%s %C(red)%d %C(cyan)[%an]' --date=iso
	glog = log --pretty='format:%C(yellow)%h %C(green)%cd %C(reset)%s %C(red)%d %C(cyan)[%an]' --date=format:'%c' --all --graph
	al = config --get-regexp alias.*
	cancel = reset --soft HEAD^
	today = log --oneline --since='12 hour ago
	purr = pull --rebase
	delete-merged-branches = !git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -p -I % git branch -d %
	a = add
	co = checkout
	sw = switch
	b = branch
	s = status
	d = diff
	p = push
	tree = log --graph --all --format=\"%x09%C(cyan bold)%an%Creset%x09%C(yellow)%h%Creset %C(magenta reverse)%d%Creset %s\"
	tree1 = log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	one-back = reset @^
	back-commit = reset --soft HEAD^

	# git操作はGUIツール派な自分もCUIに乗り換えた便利git拡張まとめ
	# https://qiita.com/yukiarrr/items/9c21d97f6c8ac31de157

	# リモート含めブランチをcheckoutする
	coo = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always'); git checkout $(echo $branch | sed 's#remotes/[^/]*/##'); else git checkout $args; fi }; f"

	# ファイルの差分をプレビュー付きで確認する
	d = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /') | fzf --preview \"echo {} | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f"

	# 差分を選択してaddする
	da = !git d | xargs git add --

	# 差分を選択してadd -pする
	dap = "!f() { for f in $(git d); do git add -p -- $f; done }; f"

	# 差分を選択してresetする
	dr = !git d | xargs git reset --

	# 差分を選択してHEADにcheckoutする
	dch = !git d | xargs git checkout HEAD

	# 現在のブランチをpullする
	pl = "!f() { args=$@; [ -z \"$args\" ] && git pull origin $(git symbolic-ref --short HEAD) || git pull $args; }; f"

	# 現在のブランチをpushする
	ps = "!f() { args=$@; [ -z \"$args\" ] && git push origin HEAD || git push $args; }; f"

	# スタッシュのリストを表示する
	stl = !git stash list | fzf --preview 'echo {} | grep -o stash@{.*} | xargs git stash show -p --color=always' --height 90% | grep -o stash@{.*}

	# スタッシュを選択してapplyする
	sta = !git stl | xargs git stash apply

	# スタッシュを選択してdropする
	std = !git stl | xargs git stash drop

[fetch]
	prune = true
[commit]
	template = ~/.stCommitMsg
[merge]
	ff = false
[pull]
	ff = only
[color]
	ui = 1
